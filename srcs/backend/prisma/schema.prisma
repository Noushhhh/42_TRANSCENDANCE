// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// commentaire de pmulin :
// Si vous souhaitez utiliser la cmd npx prisma generate, utilisew
// ce flag =
// prisma generate --schema=./path/to/your/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // add unique constraint to id ? 
  id       Int     @id @default(autoincrement())
  username String  @unique
  avatar   String? @default("https://cdn.intra.42.fr/coalition/cover/302/air__1_.jpg")

  hashPassword        String
  publicName        String?        @unique

  twoFASecret String?
  twoFAUrl    String?

  refreshToken RefreshToken[]

  firstConnexion Boolean @default(true)
  fortyTwoStudent Boolean  @default(true)
  loggedIn       Boolean @default(false)
  TwoFA          Boolean @default(false)

  // Channel related
  channelsOwned     Channel[]      @relation("Owner")
  blockedUsers      User[]         @relation("BlockedUsers")
  blockedBy         User[]         @relation("BlockedUsers")
  conversations     Channel[]      @relation("Participant")
  adminOfChannels   Channel[]      @relation("Admins")
  bannedFromChannel Channel[]      @relation("BannedUsers")
  sentMessages      Message[]      @relation("MessagesSent")
  mutedInChannels   MutedUser[]    @relation("MutedInChannel")
  // Player statistics
  gamesPlayed       Int            @default(0)
  gamesWon          Int            @default(0)
  matchHistory      MatchHistory[]

  @@map("users")
}

model Channel {
  id Int                   @id @default(autoincrement())

  name     String
  type     ChannelType     @default(PUBLIC)
  password String?         @default("")

  owner   User             @relation("Owner", fields: [ownerId], references: [id])
  ownerId Int
  admins  User[]           @relation("Admins")

  participants User[]      @relation("Participant")
  messages     Message[]   @relation("Channel")
  bannedUsers  User[]      @relation("BannedUsers")
  mutedUsers   MutedUser[] @relation("MutedUser")
}

model MutedUser {
  id              Int      @id @default(autoincrement())
  user            User     @relation("MutedInChannel", fields: [userId], references: [id])
  userId          Int
  channel         Channel  @relation("MutedUser", fields: [channelId], references: [id])
  channelId       Int
  mutedUntil      DateTime?
}

model Message {
  id        Int      @id @default(autoincrement())
  sender    User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId  Int
  channel   Channel  @relation("Channel", fields: [channelId], references: [id])
  channelId Int
  content   String
  createdAt DateTime @default(now())
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
}

model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  // This field is the scalar that will store the foreign key
  userId Int

  // This field is the relation field that lets you fetch the actual User object. 
  // The fields and references arguments define how the relationship is mapped.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  expiresAt DateTime
}

model MatchHistory {
  id            Int      @id @default(autoincrement())
  date          DateTime @default(now())
  player        User     @relation(fields: [playerId], references: [id])
  playerId      Int
  opponentName  String
  selfScore     Int
  opponentScore Int
  playerLeft    Boolean  @default(false)
  opponentLeft  Boolean  @default(false)
}
