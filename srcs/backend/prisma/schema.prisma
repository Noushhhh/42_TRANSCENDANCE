generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  username          String         @unique
  hashPassword      String
  profileName       String?        @unique
  profileImageUrl   String?
  TwoFA             Boolean        @default(false)
  avatar            String?
  login             String?        @unique
  channelsOwned     Channel[]      @relation("Owner")
  sentMessages      Message[]      @relation("MessagesSent")
  refreshToken      RefreshToken[]
  adminOfChannels   Channel[]      @relation("Admins")
  bannedFromChannel Channel[]      @relation("BannedUsers")
  users_A           User[]         @relation("BlockedUsers")
  users_B           User[]         @relation("BlockedUsers")
  mutedInChannels   Channel[]      @relation("MutedUsers")
  conversations     Channel[]      @relation("Participant")

  @@map("users")
}

model Channel {
  id           Int         @id @default(autoincrement())
  name         String
  type         ChannelType @default(PUBLIC)
  password     String?     @default("")
  ownerId      Int
  owner        User        @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  messages     Message[]   @relation("Channel")
  admins       User[]      @relation("Admins")
  bannedUsers  User[]      @relation("BannedUsers")
  mutedUsers   User[]      @relation("MutedUsers")
  participants User[]      @relation("Participant")
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  Int
  channelId Int
  content   String
  createdAt DateTime @default(now())
  channel   Channel  @relation("Channel", fields: [channelId], references: [id])
  sender    User     @relation("MessagesSent", fields: [senderId], references: [id])
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  link        String
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
}
